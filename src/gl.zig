const builtin = @import("builtin");
const APIENTRY = if (builtin.os.tag == .windows and builtin.cpu.arch == .x86) .Stdcall else .C;
pub const Enum = u32;
pub const Boolean = u8;
pub const Bitfield = u32;
pub const SizeI = i32;
pub const DEPTH_BUFFER_BIT = 0x00000100;
pub const STENCIL_BUFFER_BIT = 0x00000400;
pub const COLOR_BUFFER_BIT = 0x00004000;
pub const FALSE = 0;
pub const TRUE = 1;
pub const POINTS = 0x0000;
pub const LINES = 0x0001;
pub const LINE_LOOP = 0x0002;
pub const LINE_STRIP = 0x0003;
pub const TRIANGLES = 0x0004;
pub const TRIANGLE_STRIP = 0x0005;
pub const TRIANGLE_FAN = 0x0006;
pub const ZERO = 0;
pub const ONE = 1;
pub const SRC_COLOR = 0x0300;
pub const ONE_MINUS_SRC_COLOR = 0x0301;
pub const SRC_ALPHA = 0x0302;
pub const ONE_MINUS_SRC_ALPHA = 0x0303;
pub const DST_ALPHA = 0x0304;
pub const ONE_MINUS_DST_ALPHA = 0x0305;
pub const DST_COLOR = 0x0306;
pub const ONE_MINUS_DST_COLOR = 0x0307;
pub const SRC_ALPHA_SATURATE = 0x0308;
pub const FUNC_ADD = 0x8006;
pub const BLEND_EQUATION = 0x8009;
pub const BLEND_EQUATION_RGB = 0x8009;
pub const BLEND_EQUATION_ALPHA = 0x883D;
pub const FUNC_SUBTRACT = 0x800A;
pub const FUNC_REVERSE_SUBTRACT = 0x800B;
pub const BLEND_DST_RGB = 0x80C8;
pub const BLEND_SRC_RGB = 0x80C9;
pub const BLEND_DST_ALPHA = 0x80CA;
pub const BLEND_SRC_ALPHA = 0x80CB;
pub const CONSTANT_COLOR = 0x8001;
pub const ONE_MINUS_CONSTANT_COLOR = 0x8002;
pub const CONSTANT_ALPHA = 0x8003;
pub const ONE_MINUS_CONSTANT_ALPHA = 0x8004;
pub const BLEND_COLOR = 0x8005;
pub const ARRAY_BUFFER = 0x8892;
pub const ELEMENT_ARRAY_BUFFER = 0x8893;
pub const ARRAY_BUFFER_BINDING = 0x8894;
pub const ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
pub const STREAM_DRAW = 0x88E0;
pub const STATIC_DRAW = 0x88E4;
pub const DYNAMIC_DRAW = 0x88E8;
pub const BUFFER_SIZE = 0x8764;
pub const BUFFER_USAGE = 0x8765;
pub const CURRENT_VERTEX_ATTRIB = 0x8626;
pub const FRONT = 0x0404;
pub const BACK = 0x0405;
pub const FRONT_AND_BACK = 0x0408;
pub const TEXTURE_2D = 0x0DE1;
pub const CULL_FACE = 0x0B44;
pub const BLEND = 0x0BE2;
pub const DITHER = 0x0BD0;
pub const STENCIL_TEST = 0x0B90;
pub const DEPTH_TEST = 0x0B71;
pub const SCISSOR_TEST = 0x0C11;
pub const POLYGON_OFFSET_FILL = 0x8037;
pub const SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
pub const SAMPLE_COVERAGE = 0x80A0;
pub const NO_ERROR = 0;
pub const INVALID_ENUM = 0x0500;
pub const INVALID_VALUE = 0x0501;
pub const INVALID_OPERATION = 0x0502;
pub const OUT_OF_MEMORY = 0x0505;
pub const CW = 0x0900;
pub const CCW = 0x0901;
pub const LINE_WIDTH = 0x0B21;
pub const ALIASED_POINT_SIZE_RANGE = 0x846D;
pub const ALIASED_LINE_WIDTH_RANGE = 0x846E;
pub const CULL_FACE_MODE = 0x0B45;
pub const FRONT_FACE = 0x0B46;
pub const DEPTH_RANGE = 0x0B70;
pub const DEPTH_WRITEMASK = 0x0B72;
pub const DEPTH_CLEAR_VALUE = 0x0B73;
pub const DEPTH_FUNC = 0x0B74;
pub const STENCIL_CLEAR_VALUE = 0x0B91;
pub const STENCIL_FUNC = 0x0B92;
pub const STENCIL_FAIL = 0x0B94;
pub const STENCIL_PASS_DEPTH_FAIL = 0x0B95;
pub const STENCIL_PASS_DEPTH_PASS = 0x0B96;
pub const STENCIL_REF = 0x0B97;
pub const STENCIL_VALUE_MASK = 0x0B93;
pub const STENCIL_WRITEMASK = 0x0B98;
pub const STENCIL_BACK_FUNC = 0x8800;
pub const STENCIL_BACK_FAIL = 0x8801;
pub const STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
pub const STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
pub const STENCIL_BACK_REF = 0x8CA3;
pub const STENCIL_BACK_VALUE_MASK = 0x8CA4;
pub const STENCIL_BACK_WRITEMASK = 0x8CA5;
pub const VIEWPORT = 0x0BA2;
pub const SCISSOR_BOX = 0x0C10;
pub const COLOR_CLEAR_VALUE = 0x0C22;
pub const COLOR_WRITEMASK = 0x0C23;
pub const UNPACK_ALIGNMENT = 0x0CF5;
pub const PACK_ALIGNMENT = 0x0D05;
pub const MAX_TEXTURE_SIZE = 0x0D33;
pub const MAX_VIEWPORT_DIMS = 0x0D3A;
pub const SUBPIXEL_BITS = 0x0D50;
pub const RED_BITS = 0x0D52;
pub const GREEN_BITS = 0x0D53;
pub const BLUE_BITS = 0x0D54;
pub const ALPHA_BITS = 0x0D55;
pub const DEPTH_BITS = 0x0D56;
pub const STENCIL_BITS = 0x0D57;
pub const POLYGON_OFFSET_UNITS = 0x2A00;
pub const POLYGON_OFFSET_FACTOR = 0x8038;
pub const TEXTURE_BINDING_2D = 0x8069;
pub const SAMPLE_BUFFERS = 0x80A8;
pub const SAMPLES = 0x80A9;
pub const SAMPLE_COVERAGE_VALUE = 0x80AA;
pub const SAMPLE_COVERAGE_INVERT = 0x80AB;
pub const NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
pub const COMPRESSED_TEXTURE_FORMATS = 0x86A3;
pub const DONT_CARE = 0x1100;
pub const FASTEST = 0x1101;
pub const NICEST = 0x1102;
pub const GENERATE_MIPMAP_HINT = 0x8192;
pub const BYTE = 0x1400;
pub const UNSIGNED_BYTE = 0x1401;
pub const SHORT = 0x1402;
pub const UNSIGNED_SHORT = 0x1403;
pub const INT = 0x1404;
pub const UNSIGNED_INT = 0x1405;
pub const FLOAT = 0x1406;
pub const FIXED = 0x140C;
pub const DEPTH_COMPONENT = 0x1902;
pub const ALPHA = 0x1906;
pub const RGB = 0x1907;
pub const RGBA = 0x1908;
pub const LUMINANCE = 0x1909;
pub const LUMINANCE_ALPHA = 0x190A;
pub const UNSIGNED_SHORT_4_4_4_4 = 0x8033;
pub const UNSIGNED_SHORT_5_5_5_1 = 0x8034;
pub const UNSIGNED_SHORT_5_6_5 = 0x8363;
pub const FRAGMENT_SHADER = 0x8B30;
pub const VERTEX_SHADER = 0x8B31;
pub const MAX_VERTEX_ATTRIBS = 0x8869;
pub const MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
pub const MAX_VARYING_VECTORS = 0x8DFC;
pub const MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
pub const MAX_TEXTURE_IMAGE_UNITS = 0x8872;
pub const MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
pub const SHADER_TYPE = 0x8B4F;
pub const DELETE_STATUS = 0x8B80;
pub const LINK_STATUS = 0x8B82;
pub const VALIDATE_STATUS = 0x8B83;
pub const ATTACHED_SHADERS = 0x8B85;
pub const ACTIVE_UNIFORMS = 0x8B86;
pub const ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
pub const ACTIVE_ATTRIBUTES = 0x8B89;
pub const ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
pub const SHADING_LANGUAGE_VERSION = 0x8B8C;
pub const CURRENT_PROGRAM = 0x8B8D;
pub const NEVER = 0x0200;
pub const LESS = 0x0201;
pub const EQUAL = 0x0202;
pub const LEQUAL = 0x0203;
pub const GREATER = 0x0204;
pub const NOTEQUAL = 0x0205;
pub const GEQUAL = 0x0206;
pub const ALWAYS = 0x0207;
pub const KEEP = 0x1E00;
pub const REPLACE = 0x1E01;
pub const INCR = 0x1E02;
pub const DECR = 0x1E03;
pub const INVERT = 0x150A;
pub const INCR_WRAP = 0x8507;
pub const DECR_WRAP = 0x8508;
pub const VENDOR = 0x1F00;
pub const RENDERER = 0x1F01;
pub const VERSION = 0x1F02;
pub const EXTENSIONS = 0x1F03;
pub const NEAREST = 0x2600;
pub const LINEAR = 0x2601;
pub const NEAREST_MIPMAP_NEAREST = 0x2700;
pub const LINEAR_MIPMAP_NEAREST = 0x2701;
pub const NEAREST_MIPMAP_LINEAR = 0x2702;
pub const LINEAR_MIPMAP_LINEAR = 0x2703;
pub const TEXTURE_MAG_FILTER = 0x2800;
pub const TEXTURE_MIN_FILTER = 0x2801;
pub const TEXTURE_WRAP_S = 0x2802;
pub const TEXTURE_WRAP_T = 0x2803;
pub const TEXTURE = 0x1702;
pub const TEXTURE_CUBE_MAP = 0x8513;
pub const TEXTURE_BINDING_CUBE_MAP = 0x8514;
pub const TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
pub const TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
pub const TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
pub const TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
pub const TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
pub const TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
pub const MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
pub const TEXTURE0 = 0x84C0;
pub const TEXTURE1 = 0x84C1;
pub const TEXTURE2 = 0x84C2;
pub const TEXTURE3 = 0x84C3;
pub const TEXTURE4 = 0x84C4;
pub const TEXTURE5 = 0x84C5;
pub const TEXTURE6 = 0x84C6;
pub const TEXTURE7 = 0x84C7;
pub const TEXTURE8 = 0x84C8;
pub const TEXTURE9 = 0x84C9;
pub const TEXTURE10 = 0x84CA;
pub const TEXTURE11 = 0x84CB;
pub const TEXTURE12 = 0x84CC;
pub const TEXTURE13 = 0x84CD;
pub const TEXTURE14 = 0x84CE;
pub const TEXTURE15 = 0x84CF;
pub const TEXTURE16 = 0x84D0;
pub const TEXTURE17 = 0x84D1;
pub const TEXTURE18 = 0x84D2;
pub const TEXTURE19 = 0x84D3;
pub const TEXTURE20 = 0x84D4;
pub const TEXTURE21 = 0x84D5;
pub const TEXTURE22 = 0x84D6;
pub const TEXTURE23 = 0x84D7;
pub const TEXTURE24 = 0x84D8;
pub const TEXTURE25 = 0x84D9;
pub const TEXTURE26 = 0x84DA;
pub const TEXTURE27 = 0x84DB;
pub const TEXTURE28 = 0x84DC;
pub const TEXTURE29 = 0x84DD;
pub const TEXTURE30 = 0x84DE;
pub const TEXTURE31 = 0x84DF;
pub const ACTIVE_TEXTURE = 0x84E0;
pub const REPEAT = 0x2901;
pub const CLAMP_TO_EDGE = 0x812F;
pub const MIRRORED_REPEAT = 0x8370;
pub const FLOAT_VEC2 = 0x8B50;
pub const FLOAT_VEC3 = 0x8B51;
pub const FLOAT_VEC4 = 0x8B52;
pub const INT_VEC2 = 0x8B53;
pub const INT_VEC3 = 0x8B54;
pub const INT_VEC4 = 0x8B55;
pub const BOOL = 0x8B56;
pub const BOOL_VEC2 = 0x8B57;
pub const BOOL_VEC3 = 0x8B58;
pub const BOOL_VEC4 = 0x8B59;
pub const FLOAT_MAT2 = 0x8B5A;
pub const FLOAT_MAT3 = 0x8B5B;
pub const FLOAT_MAT4 = 0x8B5C;
pub const SAMPLER_2D = 0x8B5E;
pub const SAMPLER_CUBE = 0x8B60;
pub const VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
pub const VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
pub const VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
pub const VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
pub const VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
pub const VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
pub const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
pub const IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
pub const IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
pub const COMPILE_STATUS = 0x8B81;
pub const INFO_LOG_LENGTH = 0x8B84;
pub const SHADER_SOURCE_LENGTH = 0x8B88;
pub const SHADER_COMPILER = 0x8DFA;
pub const SHADER_BINARY_FORMATS = 0x8DF8;
pub const NUM_SHADER_BINARY_FORMATS = 0x8DF9;
pub const LOW_FLOAT = 0x8DF0;
pub const MEDIUM_FLOAT = 0x8DF1;
pub const HIGH_FLOAT = 0x8DF2;
pub const LOW_INT = 0x8DF3;
pub const MEDIUM_INT = 0x8DF4;
pub const HIGH_INT = 0x8DF5;
pub const FRAMEBUFFER = 0x8D40;
pub const RENDERBUFFER = 0x8D41;
pub const RGBA4 = 0x8056;
pub const RGB5_A1 = 0x8057;
pub const RGB565 = 0x8D62;
pub const DEPTH_COMPONENT16 = 0x81A5;
pub const STENCIL_INDEX8 = 0x8D48;
pub const RENDERBUFFER_WIDTH = 0x8D42;
pub const RENDERBUFFER_HEIGHT = 0x8D43;
pub const RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
pub const RENDERBUFFER_RED_SIZE = 0x8D50;
pub const RENDERBUFFER_GREEN_SIZE = 0x8D51;
pub const RENDERBUFFER_BLUE_SIZE = 0x8D52;
pub const RENDERBUFFER_ALPHA_SIZE = 0x8D53;
pub const RENDERBUFFER_DEPTH_SIZE = 0x8D54;
pub const RENDERBUFFER_STENCIL_SIZE = 0x8D55;
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
pub const COLOR_ATTACHMENT0 = 0x8CE0;
pub const DEPTH_ATTACHMENT = 0x8D00;
pub const STENCIL_ATTACHMENT = 0x8D20;
pub const NONE = 0;
pub const FRAMEBUFFER_COMPLETE = 0x8CD5;
pub const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
pub const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
pub const FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
pub const FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
pub const FRAMEBUFFER_BINDING = 0x8CA6;
pub const RENDERBUFFER_BINDING = 0x8CA7;
pub const MAX_RENDERBUFFER_SIZE = 0x84E8;
pub const INVALID_FRAMEBUFFER_OPERATION = 0x0506;
pub var activeTexture: *const fn (texture: Enum) callconv(APIENTRY) void = undefined;
pub var attachShader: *const fn (program: u32, shader: u32) callconv(APIENTRY) void = undefined;
pub var bindAttribLocation: *const fn (program: u32, index: u32, name: [*c]const u8) callconv(APIENTRY) void = undefined;
pub var bindBuffer: *const fn (target: Enum, buffer: u32) callconv(APIENTRY) void = undefined;
pub var bindFramebuffer: *const fn (target: Enum, framebuffer: u32) callconv(APIENTRY) void = undefined;
pub var bindRenderbuffer: *const fn (target: Enum, renderbuffer: u32) callconv(APIENTRY) void = undefined;
pub var bindTexture: *const fn (target: Enum, texture: u32) callconv(APIENTRY) void = undefined;
pub var blendColor: *const fn (red: f32, green: f32, blue: f32, alpha: f32) callconv(APIENTRY) void = undefined;
pub var blendEquation: *const fn (mode: Enum) callconv(APIENTRY) void = undefined;
pub var blendEquationSeparate: *const fn (modeRGB: Enum, modeAlpha: Enum) callconv(APIENTRY) void = undefined;
pub var blendFunc: *const fn (sfactor: Enum, dfactor: Enum) callconv(APIENTRY) void = undefined;
pub var blendFuncSeparate: *const fn (sfactorRGB: Enum, dfactorRGB: Enum, sfactorAlpha: Enum, dfactorAlpha: Enum) callconv(APIENTRY) void = undefined;
pub var bufferData: *const fn (target: Enum, size: isize, data: ?*const anyopaque, usage: Enum) callconv(APIENTRY) void = undefined;
pub var bufferSubData: *const fn (target: Enum, offset: isize, size: isize, data: ?*const anyopaque) callconv(APIENTRY) void = undefined;
pub var checkFramebufferStatus: *const fn (target: Enum) callconv(APIENTRY) Enum = undefined;
pub var clear: *const fn (mask: Bitfield) callconv(APIENTRY) void = undefined;
pub var clearColor: *const fn (red: f32, green: f32, blue: f32, alpha: f32) callconv(APIENTRY) void = undefined;
pub var clearDepthf: *const fn (d: f32) callconv(APIENTRY) void = undefined;
pub var clearStencil: *const fn (s: i32) callconv(APIENTRY) void = undefined;
pub var colorMask: *const fn (red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean) callconv(APIENTRY) void = undefined;
pub var compileShader: *const fn (shader: u32) callconv(APIENTRY) void = undefined;
pub var compressedTexImage2D: *const fn (target: Enum, level: i32, internalformat: Enum, width: SizeI, height: SizeI, border: i32, imageSize: SizeI, data: ?*const anyopaque) callconv(APIENTRY) void = undefined;
pub var compressedTexSubImage2D: *const fn (target: Enum, level: i32, xoffset: i32, yoffset: i32, width: SizeI, height: SizeI, format: Enum, imageSize: SizeI, data: ?*const anyopaque) callconv(APIENTRY) void = undefined;
pub var copyTexImage2D: *const fn (target: Enum, level: i32, internalformat: Enum, x: i32, y: i32, width: SizeI, height: SizeI, border: i32) callconv(APIENTRY) void = undefined;
pub var copyTexSubImage2D: *const fn (target: Enum, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: SizeI, height: SizeI) callconv(APIENTRY) void = undefined;
pub var createProgram: *const fn () callconv(APIENTRY) u32 = undefined;
pub var createShader: *const fn (type_: Enum) callconv(APIENTRY) u32 = undefined;
pub var cullFace: *const fn (mode: Enum) callconv(APIENTRY) void = undefined;
pub var deleteBuffers: *const fn (n: SizeI, buffers: [*c]const u32) callconv(APIENTRY) void = undefined;
pub var deleteFramebuffers: *const fn (n: SizeI, framebuffers: [*c]const u32) callconv(APIENTRY) void = undefined;
pub var deleteProgram: *const fn (program: u32) callconv(APIENTRY) void = undefined;
pub var deleteRenderbuffers: *const fn (n: SizeI, renderbuffers: [*c]const u32) callconv(APIENTRY) void = undefined;
pub var deleteShader: *const fn (shader: u32) callconv(APIENTRY) void = undefined;
pub var deleteTextures: *const fn (n: SizeI, textures: [*c]const u32) callconv(APIENTRY) void = undefined;
pub var depthFunc: *const fn (func: Enum) callconv(APIENTRY) void = undefined;
pub var depthMask: *const fn (flag: Boolean) callconv(APIENTRY) void = undefined;
pub var depthRangef: *const fn (n: f32, f: f32) callconv(APIENTRY) void = undefined;
pub var detachShader: *const fn (program: u32, shader: u32) callconv(APIENTRY) void = undefined;
pub var disable: *const fn (cap: Enum) callconv(APIENTRY) void = undefined;
pub var disableVertexAttribArray: *const fn (index: u32) callconv(APIENTRY) void = undefined;
pub var drawArrays: *const fn (mode: Enum, first: i32, count: SizeI) callconv(APIENTRY) void = undefined;
pub var drawElements: *const fn (mode: Enum, count: SizeI, type_: Enum, indices: ?*const anyopaque) callconv(APIENTRY) void = undefined;
pub var enable: *const fn (cap: Enum) callconv(APIENTRY) void = undefined;
pub var enableVertexAttribArray: *const fn (index: u32) callconv(APIENTRY) void = undefined;
pub var finish: *const fn () callconv(APIENTRY) void = undefined;
pub var flush: *const fn () callconv(APIENTRY) void = undefined;
pub var framebufferRenderbuffer: *const fn (target: Enum, attachment: Enum, renderbuffertarget: Enum, renderbuffer: u32) callconv(APIENTRY) void = undefined;
pub var framebufferTexture2D: *const fn (target: Enum, attachment: Enum, textarget: Enum, texture: u32, level: i32) callconv(APIENTRY) void = undefined;
pub var frontFace: *const fn (mode: Enum) callconv(APIENTRY) void = undefined;
pub var genBuffers: *const fn (n: SizeI, buffers: [*c]u32) callconv(APIENTRY) void = undefined;
pub var generateMipmap: *const fn (target: Enum) callconv(APIENTRY) void = undefined;
pub var genFramebuffers: *const fn (n: SizeI, framebuffers: [*c]u32) callconv(APIENTRY) void = undefined;
pub var genRenderbuffers: *const fn (n: SizeI, renderbuffers: [*c]u32) callconv(APIENTRY) void = undefined;
pub var genTextures: *const fn (n: SizeI, textures: [*c]u32) callconv(APIENTRY) void = undefined;
pub var getActiveAttrib: *const fn (program: u32, index: u32, bufSize: SizeI, length: [*c]SizeI, size: [*c]i32, type_: [*c]Enum, name: [*c]u8) callconv(APIENTRY) void = undefined;
pub var getActiveUniform: *const fn (program: u32, index: u32, bufSize: SizeI, length: [*c]SizeI, size: [*c]i32, type_: [*c]Enum, name: [*c]u8) callconv(APIENTRY) void = undefined;
pub var getAttachedShaders: *const fn (program: u32, maxCount: SizeI, count: [*c]SizeI, shaders: [*c]u32) callconv(APIENTRY) void = undefined;
pub var getAttribLocation: *const fn (program: u32, name: [*c]const u8) callconv(APIENTRY) i32 = undefined;
pub var getBooleanv: *const fn (pname: Enum, data: [*c]Boolean) callconv(APIENTRY) void = undefined;
pub var getBufferParameteriv: *const fn (target: Enum, pname: Enum, params: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getError: *const fn () callconv(APIENTRY) Enum = undefined;
pub var getFloatv: *const fn (pname: Enum, data: [*c]f32) callconv(APIENTRY) void = undefined;
pub var getFramebufferAttachmentParameteriv: *const fn (target: Enum, attachment: Enum, pname: Enum, params: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getIntegerv: *const fn (pname: Enum, data: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getProgramiv: *const fn (program: u32, pname: Enum, params: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getProgramInfoLog: *const fn (program: u32, bufSize: SizeI, length: [*c]SizeI, infoLog: [*c]u8) callconv(APIENTRY) void = undefined;
pub var getRenderbufferParameteriv: *const fn (target: Enum, pname: Enum, params: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getShaderiv: *const fn (shader: u32, pname: Enum, params: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getShaderInfoLog: *const fn (shader: u32, bufSize: SizeI, length: [*c]SizeI, infoLog: [*c]u8) callconv(APIENTRY) void = undefined;
pub var getShaderPrecisionFormat: *const fn (shadertype: Enum, precisiontype: Enum, range: [*c]i32, precision: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getShaderSource: *const fn (shader: u32, bufSize: SizeI, length: [*c]SizeI, source: [*c]u8) callconv(APIENTRY) void = undefined;
pub var getString: *const fn (name: Enum) callconv(APIENTRY) u8 = undefined;
pub var getTexParameterfv: *const fn (target: Enum, pname: Enum, params: [*c]f32) callconv(APIENTRY) void = undefined;
pub var getTexParameteriv: *const fn (target: Enum, pname: Enum, params: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getUniformfv: *const fn (program: u32, location: i32, params: [*c]f32) callconv(APIENTRY) void = undefined;
pub var getUniformiv: *const fn (program: u32, location: i32, params: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getUniformLocation: *const fn (program: u32, name: [*c]const u8) callconv(APIENTRY) i32 = undefined;
pub var getVertexAttribfv: *const fn (index: u32, pname: Enum, params: [*c]f32) callconv(APIENTRY) void = undefined;
pub var getVertexAttribiv: *const fn (index: u32, pname: Enum, params: [*c]i32) callconv(APIENTRY) void = undefined;
pub var getVertexAttribPointerv: *const fn (index: u32, pname: Enum, pointer: ?*?*anyopaque) callconv(APIENTRY) void = undefined;
pub var hint: *const fn (target: Enum, mode: Enum) callconv(APIENTRY) void = undefined;
pub var isBuffer: *const fn (buffer: u32) callconv(APIENTRY) Boolean = undefined;
pub var isEnabled: *const fn (cap: Enum) callconv(APIENTRY) Boolean = undefined;
pub var isFramebuffer: *const fn (framebuffer: u32) callconv(APIENTRY) Boolean = undefined;
pub var isProgram: *const fn (program: u32) callconv(APIENTRY) Boolean = undefined;
pub var isRenderbuffer: *const fn (renderbuffer: u32) callconv(APIENTRY) Boolean = undefined;
pub var isShader: *const fn (shader: u32) callconv(APIENTRY) Boolean = undefined;
pub var isTexture: *const fn (texture: u32) callconv(APIENTRY) Boolean = undefined;
pub var lineWidth: *const fn (width: f32) callconv(APIENTRY) void = undefined;
pub var linkProgram: *const fn (program: u32) callconv(APIENTRY) void = undefined;
pub var pixelStorei: *const fn (pname: Enum, param: i32) callconv(APIENTRY) void = undefined;
pub var polygonOffset: *const fn (factor: f32, units: f32) callconv(APIENTRY) void = undefined;
pub var readPixels: *const fn (x: i32, y: i32, width: SizeI, height: SizeI, format: Enum, type_: Enum, pixels: ?*anyopaque) callconv(APIENTRY) void = undefined;
pub var releaseShaderCompiler: *const fn () callconv(APIENTRY) void = undefined;
pub var renderbufferStorage: *const fn (target: Enum, internalformat: Enum, width: SizeI, height: SizeI) callconv(APIENTRY) void = undefined;
pub var sampleCoverage: *const fn (value: f32, invert: Boolean) callconv(APIENTRY) void = undefined;
pub var scissor: *const fn (x: i32, y: i32, width: SizeI, height: SizeI) callconv(APIENTRY) void = undefined;
pub var shaderBinary: *const fn (count: SizeI, shaders: [*c]const u32, binaryFormat: Enum, binary: ?*const anyopaque, length: SizeI) callconv(APIENTRY) void = undefined;
pub var shaderSource: *const fn (shader: u32, count: SizeI, string: [*c]const [*c]const u8, length: [*c]const i32) callconv(APIENTRY) void = undefined;
pub var stencilFunc: *const fn (func: Enum, ref: i32, mask: u32) callconv(APIENTRY) void = undefined;
pub var stencilFuncSeparate: *const fn (face: Enum, func: Enum, ref: i32, mask: u32) callconv(APIENTRY) void = undefined;
pub var stencilMask: *const fn (mask: u32) callconv(APIENTRY) void = undefined;
pub var stencilMaskSeparate: *const fn (face: Enum, mask: u32) callconv(APIENTRY) void = undefined;
pub var stencilOp: *const fn (fail: Enum, zfail: Enum, zpass: Enum) callconv(APIENTRY) void = undefined;
pub var stencilOpSeparate: *const fn (face: Enum, sfail: Enum, dpfail: Enum, dppass: Enum) callconv(APIENTRY) void = undefined;
pub var texImage2D: *const fn (target: Enum, level: i32, internalformat: i32, width: SizeI, height: SizeI, border: i32, format: Enum, type_: Enum, pixels: ?*const anyopaque) callconv(APIENTRY) void = undefined;
pub var texParameterf: *const fn (target: Enum, pname: Enum, param: f32) callconv(APIENTRY) void = undefined;
pub var texParameterfv: *const fn (target: Enum, pname: Enum, params: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var texParameteri: *const fn (target: Enum, pname: Enum, param: i32) callconv(APIENTRY) void = undefined;
pub var texParameteriv: *const fn (target: Enum, pname: Enum, params: [*c]const i32) callconv(APIENTRY) void = undefined;
pub var texSubImage2D: *const fn (target: Enum, level: i32, xoffset: i32, yoffset: i32, width: SizeI, height: SizeI, format: Enum, type_: Enum, pixels: ?*const anyopaque) callconv(APIENTRY) void = undefined;
pub var uniform1f: *const fn (location: i32, v0: f32) callconv(APIENTRY) void = undefined;
pub var uniform1fv: *const fn (location: i32, count: SizeI, value: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var uniform1i: *const fn (location: i32, v0: i32) callconv(APIENTRY) void = undefined;
pub var uniform1iv: *const fn (location: i32, count: SizeI, value: [*c]const i32) callconv(APIENTRY) void = undefined;
pub var uniform2f: *const fn (location: i32, v0: f32, v1: f32) callconv(APIENTRY) void = undefined;
pub var uniform2fv: *const fn (location: i32, count: SizeI, value: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var uniform2i: *const fn (location: i32, v0: i32, v1: i32) callconv(APIENTRY) void = undefined;
pub var uniform2iv: *const fn (location: i32, count: SizeI, value: [*c]const i32) callconv(APIENTRY) void = undefined;
pub var uniform3f: *const fn (location: i32, v0: f32, v1: f32, v2: f32) callconv(APIENTRY) void = undefined;
pub var uniform3fv: *const fn (location: i32, count: SizeI, value: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var uniform3i: *const fn (location: i32, v0: i32, v1: i32, v2: i32) callconv(APIENTRY) void = undefined;
pub var uniform3iv: *const fn (location: i32, count: SizeI, value: [*c]const i32) callconv(APIENTRY) void = undefined;
pub var uniform4f: *const fn (location: i32, v0: f32, v1: f32, v2: f32, v3: f32) callconv(APIENTRY) void = undefined;
pub var uniform4fv: *const fn (location: i32, count: SizeI, value: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var uniform4i: *const fn (location: i32, v0: i32, v1: i32, v2: i32, v3: i32) callconv(APIENTRY) void = undefined;
pub var uniform4iv: *const fn (location: i32, count: SizeI, value: [*c]const i32) callconv(APIENTRY) void = undefined;
pub var uniformMatrix2fv: *const fn (location: i32, count: SizeI, transpose: Boolean, value: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var uniformMatrix3fv: *const fn (location: i32, count: SizeI, transpose: Boolean, value: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var uniformMatrix4fv: *const fn (location: i32, count: SizeI, transpose: Boolean, value: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var useProgram: *const fn (program: u32) callconv(APIENTRY) void = undefined;
pub var validateProgram: *const fn (program: u32) callconv(APIENTRY) void = undefined;
pub var vertexAttrib1f: *const fn (index: u32, x: f32) callconv(APIENTRY) void = undefined;
pub var vertexAttrib1fv: *const fn (index: u32, v: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var vertexAttrib2f: *const fn (index: u32, x: f32, y: f32) callconv(APIENTRY) void = undefined;
pub var vertexAttrib2fv: *const fn (index: u32, v: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var vertexAttrib3f: *const fn (index: u32, x: f32, y: f32, z: f32) callconv(APIENTRY) void = undefined;
pub var vertexAttrib3fv: *const fn (index: u32, v: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var vertexAttrib4f: *const fn (index: u32, x: f32, y: f32, z: f32, w: f32) callconv(APIENTRY) void = undefined;
pub var vertexAttrib4fv: *const fn (index: u32, v: [*c]const f32) callconv(APIENTRY) void = undefined;
pub var vertexAttribPointer: *const fn (index: u32, size: i32, type_: Enum, normalized: Boolean, stride: SizeI, pointer: ?*const anyopaque) callconv(APIENTRY) void = undefined;
pub var viewport: *const fn (x: i32, y: i32, width: SizeI, height: SizeI) callconv(APIENTRY) void = undefined;
pub fn load(getProcAddress: anytype) !void {
    activeTexture = @alignCast(@ptrCast(getProcAddress("glActiveTexture") orelse return error.RequiredFunctionMissing));
    attachShader = @alignCast(@ptrCast(getProcAddress("glAttachShader") orelse return error.RequiredFunctionMissing));
    bindAttribLocation = @alignCast(@ptrCast(getProcAddress("glBindAttribLocation") orelse return error.RequiredFunctionMissing));
    bindBuffer = @alignCast(@ptrCast(getProcAddress("glBindBuffer") orelse return error.RequiredFunctionMissing));
    bindFramebuffer = @alignCast(@ptrCast(getProcAddress("glBindFramebuffer") orelse return error.RequiredFunctionMissing));
    bindRenderbuffer = @alignCast(@ptrCast(getProcAddress("glBindRenderbuffer") orelse return error.RequiredFunctionMissing));
    bindTexture = @alignCast(@ptrCast(getProcAddress("glBindTexture") orelse return error.RequiredFunctionMissing));
    blendColor = @alignCast(@ptrCast(getProcAddress("glBlendColor") orelse return error.RequiredFunctionMissing));
    blendEquation = @alignCast(@ptrCast(getProcAddress("glBlendEquation") orelse return error.RequiredFunctionMissing));
    blendEquationSeparate = @alignCast(@ptrCast(getProcAddress("glBlendEquationSeparate") orelse return error.RequiredFunctionMissing));
    blendFunc = @alignCast(@ptrCast(getProcAddress("glBlendFunc") orelse return error.RequiredFunctionMissing));
    blendFuncSeparate = @alignCast(@ptrCast(getProcAddress("glBlendFuncSeparate") orelse return error.RequiredFunctionMissing));
    bufferData = @alignCast(@ptrCast(getProcAddress("glBufferData") orelse return error.RequiredFunctionMissing));
    bufferSubData = @alignCast(@ptrCast(getProcAddress("glBufferSubData") orelse return error.RequiredFunctionMissing));
    checkFramebufferStatus = @alignCast(@ptrCast(getProcAddress("glCheckFramebufferStatus") orelse return error.RequiredFunctionMissing));
    clear = @alignCast(@ptrCast(getProcAddress("glClear") orelse return error.RequiredFunctionMissing));
    clearColor = @alignCast(@ptrCast(getProcAddress("glClearColor") orelse return error.RequiredFunctionMissing));
    clearDepthf = @alignCast(@ptrCast(getProcAddress("glClearDepthf") orelse return error.RequiredFunctionMissing));
    clearStencil = @alignCast(@ptrCast(getProcAddress("glClearStencil") orelse return error.RequiredFunctionMissing));
    colorMask = @alignCast(@ptrCast(getProcAddress("glColorMask") orelse return error.RequiredFunctionMissing));
    compileShader = @alignCast(@ptrCast(getProcAddress("glCompileShader") orelse return error.RequiredFunctionMissing));
    compressedTexImage2D = @alignCast(@ptrCast(getProcAddress("glCompressedTexImage2D") orelse return error.RequiredFunctionMissing));
    compressedTexSubImage2D = @alignCast(@ptrCast(getProcAddress("glCompressedTexSubImage2D") orelse return error.RequiredFunctionMissing));
    copyTexImage2D = @alignCast(@ptrCast(getProcAddress("glCopyTexImage2D") orelse return error.RequiredFunctionMissing));
    copyTexSubImage2D = @alignCast(@ptrCast(getProcAddress("glCopyTexSubImage2D") orelse return error.RequiredFunctionMissing));
    createProgram = @alignCast(@ptrCast(getProcAddress("glCreateProgram") orelse return error.RequiredFunctionMissing));
    createShader = @alignCast(@ptrCast(getProcAddress("glCreateShader") orelse return error.RequiredFunctionMissing));
    cullFace = @alignCast(@ptrCast(getProcAddress("glCullFace") orelse return error.RequiredFunctionMissing));
    deleteBuffers = @alignCast(@ptrCast(getProcAddress("glDeleteBuffers") orelse return error.RequiredFunctionMissing));
    deleteFramebuffers = @alignCast(@ptrCast(getProcAddress("glDeleteFramebuffers") orelse return error.RequiredFunctionMissing));
    deleteProgram = @alignCast(@ptrCast(getProcAddress("glDeleteProgram") orelse return error.RequiredFunctionMissing));
    deleteRenderbuffers = @alignCast(@ptrCast(getProcAddress("glDeleteRenderbuffers") orelse return error.RequiredFunctionMissing));
    deleteShader = @alignCast(@ptrCast(getProcAddress("glDeleteShader") orelse return error.RequiredFunctionMissing));
    deleteTextures = @alignCast(@ptrCast(getProcAddress("glDeleteTextures") orelse return error.RequiredFunctionMissing));
    depthFunc = @alignCast(@ptrCast(getProcAddress("glDepthFunc") orelse return error.RequiredFunctionMissing));
    depthMask = @alignCast(@ptrCast(getProcAddress("glDepthMask") orelse return error.RequiredFunctionMissing));
    depthRangef = @alignCast(@ptrCast(getProcAddress("glDepthRangef") orelse return error.RequiredFunctionMissing));
    detachShader = @alignCast(@ptrCast(getProcAddress("glDetachShader") orelse return error.RequiredFunctionMissing));
    disable = @alignCast(@ptrCast(getProcAddress("glDisable") orelse return error.RequiredFunctionMissing));
    disableVertexAttribArray = @alignCast(@ptrCast(getProcAddress("glDisableVertexAttribArray") orelse return error.RequiredFunctionMissing));
    drawArrays = @alignCast(@ptrCast(getProcAddress("glDrawArrays") orelse return error.RequiredFunctionMissing));
    drawElements = @alignCast(@ptrCast(getProcAddress("glDrawElements") orelse return error.RequiredFunctionMissing));
    enable = @alignCast(@ptrCast(getProcAddress("glEnable") orelse return error.RequiredFunctionMissing));
    enableVertexAttribArray = @alignCast(@ptrCast(getProcAddress("glEnableVertexAttribArray") orelse return error.RequiredFunctionMissing));
    finish = @alignCast(@ptrCast(getProcAddress("glFinish") orelse return error.RequiredFunctionMissing));
    flush = @alignCast(@ptrCast(getProcAddress("glFlush") orelse return error.RequiredFunctionMissing));
    framebufferRenderbuffer = @alignCast(@ptrCast(getProcAddress("glFramebufferRenderbuffer") orelse return error.RequiredFunctionMissing));
    framebufferTexture2D = @alignCast(@ptrCast(getProcAddress("glFramebufferTexture2D") orelse return error.RequiredFunctionMissing));
    frontFace = @alignCast(@ptrCast(getProcAddress("glFrontFace") orelse return error.RequiredFunctionMissing));
    genBuffers = @alignCast(@ptrCast(getProcAddress("glGenBuffers") orelse return error.RequiredFunctionMissing));
    generateMipmap = @alignCast(@ptrCast(getProcAddress("glGenerateMipmap") orelse return error.RequiredFunctionMissing));
    genFramebuffers = @alignCast(@ptrCast(getProcAddress("glGenFramebuffers") orelse return error.RequiredFunctionMissing));
    genRenderbuffers = @alignCast(@ptrCast(getProcAddress("glGenRenderbuffers") orelse return error.RequiredFunctionMissing));
    genTextures = @alignCast(@ptrCast(getProcAddress("glGenTextures") orelse return error.RequiredFunctionMissing));
    getActiveAttrib = @alignCast(@ptrCast(getProcAddress("glGetActiveAttrib") orelse return error.RequiredFunctionMissing));
    getActiveUniform = @alignCast(@ptrCast(getProcAddress("glGetActiveUniform") orelse return error.RequiredFunctionMissing));
    getAttachedShaders = @alignCast(@ptrCast(getProcAddress("glGetAttachedShaders") orelse return error.RequiredFunctionMissing));
    getAttribLocation = @alignCast(@ptrCast(getProcAddress("glGetAttribLocation") orelse return error.RequiredFunctionMissing));
    getBooleanv = @alignCast(@ptrCast(getProcAddress("glGetBooleanv") orelse return error.RequiredFunctionMissing));
    getBufferParameteriv = @alignCast(@ptrCast(getProcAddress("glGetBufferParameteriv") orelse return error.RequiredFunctionMissing));
    getError = @alignCast(@ptrCast(getProcAddress("glGetError") orelse return error.RequiredFunctionMissing));
    getFloatv = @alignCast(@ptrCast(getProcAddress("glGetFloatv") orelse return error.RequiredFunctionMissing));
    getFramebufferAttachmentParameteriv = @alignCast(@ptrCast(getProcAddress("glGetFramebufferAttachmentParameteriv") orelse return error.RequiredFunctionMissing));
    getIntegerv = @alignCast(@ptrCast(getProcAddress("glGetIntegerv") orelse return error.RequiredFunctionMissing));
    getProgramiv = @alignCast(@ptrCast(getProcAddress("glGetProgramiv") orelse return error.RequiredFunctionMissing));
    getProgramInfoLog = @alignCast(@ptrCast(getProcAddress("glGetProgramInfoLog") orelse return error.RequiredFunctionMissing));
    getRenderbufferParameteriv = @alignCast(@ptrCast(getProcAddress("glGetRenderbufferParameteriv") orelse return error.RequiredFunctionMissing));
    getShaderiv = @alignCast(@ptrCast(getProcAddress("glGetShaderiv") orelse return error.RequiredFunctionMissing));
    getShaderInfoLog = @alignCast(@ptrCast(getProcAddress("glGetShaderInfoLog") orelse return error.RequiredFunctionMissing));
    getShaderPrecisionFormat = @alignCast(@ptrCast(getProcAddress("glGetShaderPrecisionFormat") orelse return error.RequiredFunctionMissing));
    getShaderSource = @alignCast(@ptrCast(getProcAddress("glGetShaderSource") orelse return error.RequiredFunctionMissing));
    getString = @alignCast(@ptrCast(getProcAddress("glGetString") orelse return error.RequiredFunctionMissing));
    getTexParameterfv = @alignCast(@ptrCast(getProcAddress("glGetTexParameterfv") orelse return error.RequiredFunctionMissing));
    getTexParameteriv = @alignCast(@ptrCast(getProcAddress("glGetTexParameteriv") orelse return error.RequiredFunctionMissing));
    getUniformfv = @alignCast(@ptrCast(getProcAddress("glGetUniformfv") orelse return error.RequiredFunctionMissing));
    getUniformiv = @alignCast(@ptrCast(getProcAddress("glGetUniformiv") orelse return error.RequiredFunctionMissing));
    getUniformLocation = @alignCast(@ptrCast(getProcAddress("glGetUniformLocation") orelse return error.RequiredFunctionMissing));
    getVertexAttribfv = @alignCast(@ptrCast(getProcAddress("glGetVertexAttribfv") orelse return error.RequiredFunctionMissing));
    getVertexAttribiv = @alignCast(@ptrCast(getProcAddress("glGetVertexAttribiv") orelse return error.RequiredFunctionMissing));
    getVertexAttribPointerv = @alignCast(@ptrCast(getProcAddress("glGetVertexAttribPointerv") orelse return error.RequiredFunctionMissing));
    hint = @alignCast(@ptrCast(getProcAddress("glHint") orelse return error.RequiredFunctionMissing));
    isBuffer = @alignCast(@ptrCast(getProcAddress("glIsBuffer") orelse return error.RequiredFunctionMissing));
    isEnabled = @alignCast(@ptrCast(getProcAddress("glIsEnabled") orelse return error.RequiredFunctionMissing));
    isFramebuffer = @alignCast(@ptrCast(getProcAddress("glIsFramebuffer") orelse return error.RequiredFunctionMissing));
    isProgram = @alignCast(@ptrCast(getProcAddress("glIsProgram") orelse return error.RequiredFunctionMissing));
    isRenderbuffer = @alignCast(@ptrCast(getProcAddress("glIsRenderbuffer") orelse return error.RequiredFunctionMissing));
    isShader = @alignCast(@ptrCast(getProcAddress("glIsShader") orelse return error.RequiredFunctionMissing));
    isTexture = @alignCast(@ptrCast(getProcAddress("glIsTexture") orelse return error.RequiredFunctionMissing));
    lineWidth = @alignCast(@ptrCast(getProcAddress("glLineWidth") orelse return error.RequiredFunctionMissing));
    linkProgram = @alignCast(@ptrCast(getProcAddress("glLinkProgram") orelse return error.RequiredFunctionMissing));
    pixelStorei = @alignCast(@ptrCast(getProcAddress("glPixelStorei") orelse return error.RequiredFunctionMissing));
    polygonOffset = @alignCast(@ptrCast(getProcAddress("glPolygonOffset") orelse return error.RequiredFunctionMissing));
    readPixels = @alignCast(@ptrCast(getProcAddress("glReadPixels") orelse return error.RequiredFunctionMissing));
    releaseShaderCompiler = @alignCast(@ptrCast(getProcAddress("glReleaseShaderCompiler") orelse return error.RequiredFunctionMissing));
    renderbufferStorage = @alignCast(@ptrCast(getProcAddress("glRenderbufferStorage") orelse return error.RequiredFunctionMissing));
    sampleCoverage = @alignCast(@ptrCast(getProcAddress("glSampleCoverage") orelse return error.RequiredFunctionMissing));
    scissor = @alignCast(@ptrCast(getProcAddress("glScissor") orelse return error.RequiredFunctionMissing));
    shaderBinary = @alignCast(@ptrCast(getProcAddress("glShaderBinary") orelse return error.RequiredFunctionMissing));
    shaderSource = @alignCast(@ptrCast(getProcAddress("glShaderSource") orelse return error.RequiredFunctionMissing));
    stencilFunc = @alignCast(@ptrCast(getProcAddress("glStencilFunc") orelse return error.RequiredFunctionMissing));
    stencilFuncSeparate = @alignCast(@ptrCast(getProcAddress("glStencilFuncSeparate") orelse return error.RequiredFunctionMissing));
    stencilMask = @alignCast(@ptrCast(getProcAddress("glStencilMask") orelse return error.RequiredFunctionMissing));
    stencilMaskSeparate = @alignCast(@ptrCast(getProcAddress("glStencilMaskSeparate") orelse return error.RequiredFunctionMissing));
    stencilOp = @alignCast(@ptrCast(getProcAddress("glStencilOp") orelse return error.RequiredFunctionMissing));
    stencilOpSeparate = @alignCast(@ptrCast(getProcAddress("glStencilOpSeparate") orelse return error.RequiredFunctionMissing));
    texImage2D = @alignCast(@ptrCast(getProcAddress("glTexImage2D") orelse return error.RequiredFunctionMissing));
    texParameterf = @alignCast(@ptrCast(getProcAddress("glTexParameterf") orelse return error.RequiredFunctionMissing));
    texParameterfv = @alignCast(@ptrCast(getProcAddress("glTexParameterfv") orelse return error.RequiredFunctionMissing));
    texParameteri = @alignCast(@ptrCast(getProcAddress("glTexParameteri") orelse return error.RequiredFunctionMissing));
    texParameteriv = @alignCast(@ptrCast(getProcAddress("glTexParameteriv") orelse return error.RequiredFunctionMissing));
    texSubImage2D = @alignCast(@ptrCast(getProcAddress("glTexSubImage2D") orelse return error.RequiredFunctionMissing));
    uniform1f = @alignCast(@ptrCast(getProcAddress("glUniform1f") orelse return error.RequiredFunctionMissing));
    uniform1fv = @alignCast(@ptrCast(getProcAddress("glUniform1fv") orelse return error.RequiredFunctionMissing));
    uniform1i = @alignCast(@ptrCast(getProcAddress("glUniform1i") orelse return error.RequiredFunctionMissing));
    uniform1iv = @alignCast(@ptrCast(getProcAddress("glUniform1iv") orelse return error.RequiredFunctionMissing));
    uniform2f = @alignCast(@ptrCast(getProcAddress("glUniform2f") orelse return error.RequiredFunctionMissing));
    uniform2fv = @alignCast(@ptrCast(getProcAddress("glUniform2fv") orelse return error.RequiredFunctionMissing));
    uniform2i = @alignCast(@ptrCast(getProcAddress("glUniform2i") orelse return error.RequiredFunctionMissing));
    uniform2iv = @alignCast(@ptrCast(getProcAddress("glUniform2iv") orelse return error.RequiredFunctionMissing));
    uniform3f = @alignCast(@ptrCast(getProcAddress("glUniform3f") orelse return error.RequiredFunctionMissing));
    uniform3fv = @alignCast(@ptrCast(getProcAddress("glUniform3fv") orelse return error.RequiredFunctionMissing));
    uniform3i = @alignCast(@ptrCast(getProcAddress("glUniform3i") orelse return error.RequiredFunctionMissing));
    uniform3iv = @alignCast(@ptrCast(getProcAddress("glUniform3iv") orelse return error.RequiredFunctionMissing));
    uniform4f = @alignCast(@ptrCast(getProcAddress("glUniform4f") orelse return error.RequiredFunctionMissing));
    uniform4fv = @alignCast(@ptrCast(getProcAddress("glUniform4fv") orelse return error.RequiredFunctionMissing));
    uniform4i = @alignCast(@ptrCast(getProcAddress("glUniform4i") orelse return error.RequiredFunctionMissing));
    uniform4iv = @alignCast(@ptrCast(getProcAddress("glUniform4iv") orelse return error.RequiredFunctionMissing));
    uniformMatrix2fv = @alignCast(@ptrCast(getProcAddress("glUniformMatrix2fv") orelse return error.RequiredFunctionMissing));
    uniformMatrix3fv = @alignCast(@ptrCast(getProcAddress("glUniformMatrix3fv") orelse return error.RequiredFunctionMissing));
    uniformMatrix4fv = @alignCast(@ptrCast(getProcAddress("glUniformMatrix4fv") orelse return error.RequiredFunctionMissing));
    useProgram = @alignCast(@ptrCast(getProcAddress("glUseProgram") orelse return error.RequiredFunctionMissing));
    validateProgram = @alignCast(@ptrCast(getProcAddress("glValidateProgram") orelse return error.RequiredFunctionMissing));
    vertexAttrib1f = @alignCast(@ptrCast(getProcAddress("glVertexAttrib1f") orelse return error.RequiredFunctionMissing));
    vertexAttrib1fv = @alignCast(@ptrCast(getProcAddress("glVertexAttrib1fv") orelse return error.RequiredFunctionMissing));
    vertexAttrib2f = @alignCast(@ptrCast(getProcAddress("glVertexAttrib2f") orelse return error.RequiredFunctionMissing));
    vertexAttrib2fv = @alignCast(@ptrCast(getProcAddress("glVertexAttrib2fv") orelse return error.RequiredFunctionMissing));
    vertexAttrib3f = @alignCast(@ptrCast(getProcAddress("glVertexAttrib3f") orelse return error.RequiredFunctionMissing));
    vertexAttrib3fv = @alignCast(@ptrCast(getProcAddress("glVertexAttrib3fv") orelse return error.RequiredFunctionMissing));
    vertexAttrib4f = @alignCast(@ptrCast(getProcAddress("glVertexAttrib4f") orelse return error.RequiredFunctionMissing));
    vertexAttrib4fv = @alignCast(@ptrCast(getProcAddress("glVertexAttrib4fv") orelse return error.RequiredFunctionMissing));
    vertexAttribPointer = @alignCast(@ptrCast(getProcAddress("glVertexAttribPointer") orelse return error.RequiredFunctionMissing));
    viewport = @alignCast(@ptrCast(getProcAddress("glViewport") orelse return error.RequiredFunctionMissing));
}
